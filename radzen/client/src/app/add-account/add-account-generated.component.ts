/*
  This file is automatically generated. Any changes will be overwritten.
  Modify add-account.component.ts instead.
*/
import { LOCALE_ID, ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { FormComponent } from '@radzen/angular/dist/form';

import { ConfigService } from '../config.service';

import { CrmService } from '../crm.service';
import { SecurityService } from '../security.service';

export class AddAccountGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('pageTitle') pageTitle: HeadingComponent;
  @ViewChild('form0') form0: FormComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  configService: ConfigService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  httpClient: HttpClient;

  locale: string;

  _location: Location;

  _subscription: Subscription;

  crm: CrmService;

  security: SecurityService;
  getAddressesForAddressIdPageSize: any;
  getAddressesForAddressIdResult: any;
  getAddressesForAddressIdCount: any;
  getAccountsForParentAccountIdPageSize: any;
  getAccountsForParentAccountIdResult: any;
  getAccountsForParentAccountIdCount: any;
  getAccountsForBillingAccountIdPageSize: any;
  getAccountsForBillingAccountIdResult: any;
  getAccountsForBillingAccountIdCount: any;
  getAccountRelationTypesForRelationTypeIdPageSize: any;
  getAccountRelationTypesForRelationTypeIdResult: any;
  getAccountRelationTypesForRelationTypeIdCount: any;
  getContactsForPrimaryContactIdPageSize: any;
  getContactsForPrimaryContactIdResult: any;
  getContactsForPrimaryContactIdCount: any;
  getUsersForCreatedByIdPageSize: any;
  getUsersForCreatedByIdResult: any;
  getUsersForCreatedByIdCount: any;
  getUsersForModifiedByIdPageSize: any;
  getUsersForModifiedByIdResult: any;
  getUsersForModifiedByIdCount: any;
  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.configService = this.injector.get(ConfigService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.locale = this.injector.get(LOCALE_ID);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.httpClient = this.injector.get(HttpClient);

    this.crm = this.injector.get(CrmService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    this._subscription.unsubscribe();
  }


  load() {
    this.getAddressesForAddressIdPageSize = 10;

    this.crm.getAddresses(null, this.getAddressesForAddressIdPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getAddressesForAddressIdResult = result.value;

      this.getAddressesForAddressIdCount = result['@odata.count'];
    }, (result: any) => {

    });

    this.getAccountsForParentAccountIdPageSize = 10;

    this.crm.getAccounts(null, this.getAccountsForParentAccountIdPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getAccountsForParentAccountIdResult = result.value;

      this.getAccountsForParentAccountIdCount = result['@odata.count'];
    }, (result: any) => {

    });

    this.getAccountsForBillingAccountIdPageSize = 10;

    this.crm.getAccounts(null, this.getAccountsForBillingAccountIdPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getAccountsForBillingAccountIdResult = result.value;

      this.getAccountsForBillingAccountIdCount = result['@odata.count'];
    }, (result: any) => {

    });

    this.getAccountRelationTypesForRelationTypeIdPageSize = 10;

    this.crm.getAccountRelationTypes(null, this.getAccountRelationTypesForRelationTypeIdPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getAccountRelationTypesForRelationTypeIdResult = result.value;

      this.getAccountRelationTypesForRelationTypeIdCount = result['@odata.count'];
    }, (result: any) => {

    });

    this.getContactsForPrimaryContactIdPageSize = 10;

    this.crm.getContacts(null, this.getContactsForPrimaryContactIdPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getContactsForPrimaryContactIdResult = result.value;

      this.getContactsForPrimaryContactIdCount = result['@odata.count'];
    }, (result: any) => {

    });

    this.getUsersForCreatedByIdPageSize = 10;

    this.crm.getUsers(null, this.getUsersForCreatedByIdPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getUsersForCreatedByIdResult = result.value;

      this.getUsersForCreatedByIdCount = result['@odata.count'];
    }, (result: any) => {

    });

    this.getUsersForModifiedByIdPageSize = 10;

    this.crm.getUsers(null, this.getUsersForModifiedByIdPageSize, 0, null, true, null, null, null)
    .subscribe((result: any) => {
      this.getUsersForModifiedByIdResult = result.value;

      this.getUsersForModifiedByIdCount = result['@odata.count'];
    }, (result: any) => {

    });
  }

  form0Cancel(event: any) {
    if (this.dialogRef) {
      this.dialogRef.close();
    } else {
      this._location.back();
    }
  }

  form0Submit(event: any) {
    this.crm.createAccount(null, event)
    .subscribe((result: any) => {
      if (this.dialogRef) {
        this.dialogRef.close();
      }
      this.router.navigate(['accounts']);
    }, (result: any) => {
      this.notificationService.notify({ severity: "error", summary: `Error`, detail: `Unable to create new Account!` });
    });
  }

  form0LoadData(event: any) {
    if (event.property == 'AddressId') {
          this.crm.getAddresses(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
      .subscribe((result: any) => {
          this.getAddressesForAddressIdResult = result.value;

      this.getAddressesForAddressIdCount = result['@odata.count'];
      }, (result: any) => {
    
      });
    }

    if (event.property == 'ParentAccountId') {
          this.crm.getAccounts(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
      .subscribe((result: any) => {
          this.getAccountsForParentAccountIdResult = result.value;

      this.getAccountsForParentAccountIdCount = result['@odata.count'];
      }, (result: any) => {
    
      });
    }

    if (event.property == 'BillingAccountId') {
          this.crm.getAccounts(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
      .subscribe((result: any) => {
          this.getAccountsForBillingAccountIdResult = result.value;

      this.getAccountsForBillingAccountIdCount = result['@odata.count'];
      }, (result: any) => {
    
      });
    }

    if (event.property == 'RelationTypeId') {
          this.crm.getAccountRelationTypes(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
      .subscribe((result: any) => {
          this.getAccountRelationTypesForRelationTypeIdResult = result.value;

      this.getAccountRelationTypesForRelationTypeIdCount = result['@odata.count'];
      }, (result: any) => {
    
      });
    }

    if (event.property == 'PrimaryContactId') {
          this.crm.getContacts(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
      .subscribe((result: any) => {
          this.getContactsForPrimaryContactIdResult = result.value;

      this.getContactsForPrimaryContactIdCount = result['@odata.count'];
      }, (result: any) => {
    
      });
    }

    if (event.property == 'CreatedById') {
          this.crm.getUsers(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
      .subscribe((result: any) => {
          this.getUsersForCreatedByIdResult = result.value;

      this.getUsersForCreatedByIdCount = result['@odata.count'];
      }, (result: any) => {
    
      });
    }

    if (event.property == 'ModifiedById') {
          this.crm.getUsers(`${event.filter}`, event.top, event.skip, `${event.orderby}`, true, null, null, null)
      .subscribe((result: any) => {
          this.getUsersForModifiedByIdResult = result.value;

      this.getUsersForModifiedByIdCount = result['@odata.count'];
      }, (result: any) => {
    
      });
    }
  }
}
